class LRUCache {
public:

/* Created a doubly linked list and map
doubly linked list contain head and tail.
New added will get add just after head and old or oversized will get removed from just before tail.
With the help of unordered map we will keep track  of nodes.
m.find() is mostly O(1) very rare probability i.e it will be O(N); 
*/
class node{
    public:
      int key;
      int val;
      node * next;
      node * prev;
      node(int _key, int _val) {
        key = _key;
        val = _val;
      }
    
};

      node * head= new node(-1,-1);
      node * tail= new node(-1,-1);
      int cap;
      unordered_map<int,node *> m;
    LRUCache(int capacity) {
         cap=capacity;
        head->next=tail;
        tail->prev=head;
    }
      void addnode(node * newnode) {
    node * temp = head -> next;
    newnode -> next = temp;
    newnode -> prev = head;
    head -> next = newnode;
    temp -> prev = newnode;
  }

  void deletenode(node * delnode) {
    node * delprev = delnode -> prev;
    node * delnext = delnode -> next;
    delprev -> next = delnext;
    delnext -> prev = delprev;
  }

    int get(int key) {
        if(m.find(key)!=m.end()){
            node * tempnode =m[key];
            int temp = tempnode->val;
            m.erase(key);
            deletenode(tempnode);
            addnode(tempnode);
    m[key]=head->next;
    return temp;
        }
return -1;
    }
    
    void put(int key, int value) {
        if(m.find(key) != m.end()){
            node * temp =m[key];
      m.erase(key);
      deletenode(temp);
        }
         if (m.size() == cap) {
      m.erase(tail -> prev -> key);
      deletenode(tail -> prev);
    }
    addnode(new node(key,value));
    m[key]=head->next;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */