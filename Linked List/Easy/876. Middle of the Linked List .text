/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


 /* 
 Here we used the logic of tortoise and hare concept.  Basically we moved the one index with twice the speed of ans index
 As soon as hare index reaches the end,the tortoise index will be at the middle of linked list

 T.C : O(N)
 S.C : O(1)
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* temp=head;
         ListNode* temp1=head;
         while(temp1!=NULL){
        
            temp1=temp1->next;
           if(temp1==NULL)    return temp;
           temp1=temp1 ->next;
            temp=temp->next;
           
         }
        return temp;
    }
};